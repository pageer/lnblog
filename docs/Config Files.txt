Title: Configuration files

File: pathconfig.php

There is a pathconfig.php file in the root directory of each weblog.  The purpose of this 
file is simply to the path and URL to the LnBlog installation and to define the URL to 
the blog root directory.  You can edit these values with the <blogpaths.php> page. 

Note that the only time you would really want to change this is when you move
your LnBlog installation folder, either as part of site cleanup or because you
are changing web hosts.  In either case, another easy method is to simply delete
the pathconfig.php file for your blog and run an upgrade on the blog from the
administration page, which will recreate it.  

File: userconfig.cfg

This is a simple text file that is provided as a "user friendly" alternative to the
<userconfig.php> file.  It is a text file that can be used to override configuration constants 
defined in <blogconfig.php>.

The file uses a simple key=value format, where the configuration constant name is the key and the
setting you want is the value.  Comments begin with a hash (#) and must be on their own line.
Extra whitespace will be removed from keys and values.  Do not include quotes for sting values unless you want them as literal characters in the value.

When a pages loads, LnBlog will read this file and define each key as a constant with the
associated value.  The values true and false will be automatically converted to boolean values, 
but all others will be treated as strings.  For a list of overridable configuration constants 
refer to <blogconfig.php>.  The constants with a listed default value can be changed.

File: userconfig.php

This file can be used to add arbitrary PHP code to be run when a page loads.  You might use this
to change some of the configuration constants defined in <blogconfig.php> or to call ini_set()
to change the PHP configuration.  This file does not exist in the default install and must be
created if you want to use it.

This is a regular PHP file.  Because it is called when a page first loads, it is important that all 
code be enclosed in PHP tags and that there be no characters or whitespace outside the PHP tags.
If there is, then you will get errors.  Likewise, any PHP syntax errors in the file will generate 
errors when the file loads.  Therefore, this is recommended only for people who know what they're 
doing.

File: fsconfig.php
Stores data storage configuration.  See below.

Section: Format of fsconfig.php

The following describes the content and rationale of the fsconfig.php file.

Topic: File Writing Overview

Currently, LnBlog only stores data by writing it to text files on the web
server.  However, it supports two methods for doing this.  One is to use 
standard file-writing functions and the other is to use FTP.  These are 
refferred to, respectively, as NativeFS and FTPFS.  Deciding 
between these is the first configuration step for LnBlog and is done by
the <fs_setup.php> script.  This script creates the fsconfig.php file, 
which should not be present in an initial installation.

The reason for having two types of filesystem writing is that many web hosts
use PHP's *safe_mode* feature to provide added security.  One of the 
restrictions this imposes is that scripts can only read files from the disk
if the owner of the file is the same as the owner of the script.  In some shared
hosting environments (such as those using Mod_PHP), PHP runs and writes files as
a system accout, whereas the scripts themselves would be owned by
the user account of the site operator, so scripts would not be able to read any 
of the files they created.  This restriction can be bypassed by performing 
file writing via FTP, as this allows scripts to connect to the FTP server as
the site owner, not a system user.  This also has the beneficial effect that 
the files created by the scripts will be owned by the user account, so that
they can be more easily managed via an FTP client.

If you have the option, it is recommended that you use NativeFS.  It is by far
the faster, more reliable, and easier to configure.  FTPFS only exists to work
around security restrictions created by certain configurations.  Furthermore, note
that *safe_mode* was deprecated in PHP 5.3 and removed from PHP 5.4, so unless you're
stuck on a very old version of PHP, it is unlikely that you will need FTPFS.

Topic: Technical Details

Writing to the filesystem is carried out using an abstract interface class.
This class defines the basic functions of the file-writing subsystem, such 
as creating directories, deleting files, and writing text data to a file.
There are NativeFS and FTPFS subclasses which implement this interface.  
LnBlog writes files by using a wrapper function in the <creators.php> file 
to instantiate the correct class based on a constant defined in the 
fsconfig.php file.  

The fsconfig.php file is a simple PHP source code file which contains only 
a series of constant definitions.  If necessary, these definitions can be 
changed by hand, although this is not recommended.  Note that which 
definitions are actually present depends on the type of file writing used.
If NativeFS is used, there is no extra configuration needed, but FTPFS 
requires various user authentication details.

Group: Standard Constants

Constant: DOCUMENT_ROOT
This is the full local path to the web server's document root, 
i.e. the root directory from which files are served.  This is not to be
confused with the doc_root setting in the php.ini file.

This setting is used to convert local paths into URLs.  Basically, this
path is stripped from the full paths to files and directories to get the 
path component of the URL.

Constant: FS_PLUGIN
This determines which filesystem writing method to use.
Currently, there are only two options, "nativefs" and "ftpfs".

Group: FTPFS-only Constants

Constant: FTPFS_USER
The username to use when establishing an FTP connection.
Note that this username *must* have write access to the relevant directories
on the server, or else this obviously will not work.

Constant: FTPFS_PASSWORD
The password used to log in with <FTPFS_USER>.
Note that this constant currently uses a plain-text password.

Constant: FTPFS_HOST
The host and/or domain name of the FTP server to connect to.
In the fairly common case where the FTP server and web server are both
running on the same machine, then you can use "localhost" for this value.
In other cases, it will probably be something like "ftp.myserver.com".

Constant: FTP_ROOT
The full path on the server to the user's FTP root.
In other words, this is the highest directory the user can access through 
FTP.  In some cases, it will be the root directory, or "/".  In other cases,
it may be something like "/home/username/".  If you are unsure, you can use
the <ftproot_test.php> script to try different possibilities.

The purpose of this constant is to convert paths on the FTP server into path
on the web server.  Because FTP servers often restrict users to a certain 
portion of the filesystem, these paths are not always the same, even when
both servers are on the same physical machine.

